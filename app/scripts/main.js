"use strict";!function n(o,t,e){function i(c,s){if(!t[c]){if(!o[c]){var a="function"==typeof require&&require;if(!s&&a)return a(c,!0);if(r)return r(c,!0);var f=new Error("Cannot find module '"+c+"'");throw f.code="MODULE_NOT_FOUND",f}var u=t[c]={exports:{}};o[c][0].call(u.exports,function(n){var t=o[c][1][n];return i(t||n)},u,u.exports,n,o,t,e)}return t[c].exports}for(var r="function"==typeof require&&require,c=0;c<e.length;c++)i(e[c]);return i}({1:[function(n,o,t){o.exports=function(){var n=$(".contentform .control-group input"),o=$(".contentform .control-group label"),t=$(".contentform .control-group input[type='checkbox']");o.on("click",function(){$(this).parent().find("input").focus()}),n.on("focus",function(){$(this).parent().find("label").addClass("active")}),n.on("blur",function(){0==$(this).val().length&&$(this).parent().find("label").removeClass("active")}),t.on("click",function(){$(this).is(":checked")?$(this).parent().find("span").css("color","#2196F3"):$(this).parent().find("span").css("color","#999")})}},{}],2:[function(n,o,t){o.exports=function(){var n={strings:["Digital.","Pharma.","Logistics."],typeSpeed:120,loop:!0};new Typed("#type",n);$('a[href*="#"]').not('[href="#"]').not('[href="#0"]').click(function(n){if(location.pathname.replace(/^\//,"")==this.pathname.replace(/^\//,"")&&location.hostname==this.hostname){var o=$(this.hash);(o=o.length?o:$("[name="+this.hash.slice(1)+"]")).length&&(n.preventDefault(),$("html, body").animate({scrollTop:o.offset().top-30},1e3,function(){var n=$(o);if(n.focus(),n.is(":focus"))return!1;n.attr("tabindex","-1"),n.focus()}))}})}},{}],3:[function(n,o,t){o.exports=function(){}},{}],4:[function(n,o,t){o.exports=function(){var n=$(".writerform .control-group input"),o=$(".writerform .control-group label"),t=$(".writerform .control-group input[type='checkbox']");o.on("click",function(){$(this).parent().find("input").focus()}),n.on("focus",function(){$(this).parent().find("label").addClass("active")}),n.on("blur",function(){0==$(this).val().length&&$(this).parent().find("label").removeClass("active")}),t.on("click",function(){$(this).is(":checked")?$(this).parent().find("span").css("color","#2196F3"):$(this).parent().find("span").css("color","#999")})}},{}],5:[function(n,o,t){$(document).ready(function(){if($(window).innerWidth()>1024)$("#pagepiling").pagepiling({menu:"#menu",anchors:["home","about","signin","contact"],sectionsColor:["#ecf0f1","#2ebe21","#2C3E50","#51bec4"],navigation:{position:"right",tooltips:["Home","About","Signin","Contact"]},afterLoad:function(n,o){1===o?console.log("1"):2===o||3===o&&$("#signinvideo")[0].play()}});else{$("#signinvideo")[0].play();var n=["#section1","#section2","#section3","#section4"];$("ul#menu > li").each(function(o){$(this).find("a").attr("href",n[o])}),$("ul#menu > li").click(function(){$("ul#menu > li").removeClass("active"),$(this).addClass("active")})}}),n("../components/home/home.js")(),n("../components/info/info.js")(),n("../components/writersform/writerform.js")(),n("../components/contentform/contentform.js")()},{"../components/contentform/contentform.js":1,"../components/home/home.js":2,"../components/info/info.js":3,"../components/writersform/writerform.js":4}]},{},[5]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
